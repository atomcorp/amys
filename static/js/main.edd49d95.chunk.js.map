{"version":3,"sources":["components/Tile/Tile.module.css","components/FrontTile/FrontTile.module.css","App.module.css","components/Tiles/Tiles.module.css","components/Tile/TileTools.tsx","components/Tile/Tile.tsx","components/FrontTile/FrontTile.tsx","components/Tiles/Tiles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TileTools","props","className","css","tools","onClick","renderImage","dispatch","type","payload","isFeature","htmlFor","id","accept","onChange","e","target","files","length","imageBlob","image","document","createElement","src","URL","createObjectURL","addImage","removeImage","value","feature","handleNewLines","string","split","map","i","ogArr","key","initialState","showImg","reducer","state","action","immer","draftState","Tile","useReducer","tileRef","useRef","imgContainerRef","heading","page","ref","container","featureTitle","toUpperCase","test","drop","data","track","main","artist","Artist","song","Song","label","Label","imgEl","current","innerHTML","overlayEl","classList","add","overlay","appendChild","domtoimage","toBlob","then","blob","saveAs","initDate","date","Date","getFullYear","toString","getMonth","padStart","getDate","draft","features","intialState","TileFront","dateArr","str","parseInt","dateObj","Intl","DateTimeFormat","year","month","day","format","replace","formatDate","title","rows","Tiles","reduce","acc","item","includes","Page","filter","tile","App","useState","setData","upload","fileBlob","reader","FileReader","onload","result","csvtojson","fromString","error","console","readAsText","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.edd49d95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tile_container__3B4Yg\",\"track\":\"Tile_track__2NpBT\",\"main\":\"Tile_main__9Bs6s\",\"song\":\"Tile_song__bDX2T\",\"artist\":\"Tile_artist__3FiL9\",\"label\":\"Tile_label__2tjXM\",\"image\":\"Tile_image__VAH2Z\",\"overlay\":\"Tile_overlay__1kRUF\",\"showImg\":\"Tile_showImg__3n_hP\",\"featureTitle\":\"Tile_featureTitle__3AvAS\",\"drop\":\"Tile_drop__6jfcu\",\"tools\":\"Tile_tools__2nIrj\",\"heading\":\"Tile_heading__2nf7U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FrontTile_container__1LLQN\",\"main\":\"FrontTile_main__1fctR\",\"drop\":\"FrontTile_drop__xqF7M\",\"date\":\"FrontTile_date__2gGdO\",\"title\":\"FrontTile_title__1MDsE\",\"features\":\"FrontTile_features__1C5o9\",\"image\":\"FrontTile_image__2ZpFM\",\"tools\":\"FrontTile_tools__1i4EU\",\"heading\":\"FrontTile_heading__ZHzMx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__27z2F\",\"heading\":\"App_heading__1naiI\",\"upload\":\"App_upload__lHwEp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Tiles_title__3ELMY\",\"container\":\"Tiles_container___teq1\"};","import React from \"react\";\n\nimport { ActionTypes } from \"types\";\nimport css from \"./Tile.module.css\";\n\ntype TileToolsType = {\n  addImage: (imgEl: HTMLImageElement) => void;\n  removeImage: () => void;\n  dispatch: React.Dispatch<ActionTypes>;\n  isFeature: Boolean;\n  feature: string;\n  renderImage: () => void;\n};\n\nconst TileTools = (props: TileToolsType) => (\n  <section className={css.tools}>\n    <button\n      onClick={() => {\n        props.renderImage();\n      }}\n    >\n      Convert to .png\n    </button>\n    {\" - \"}\n    <button\n      onClick={() => {\n        props.dispatch({ type: \"isFeature/set\", payload: !props.isFeature });\n      }}\n    >\n      Toggle feature\n    </button>\n    <br />\n    {props.isFeature && (\n      <>\n        <label htmlFor=\"image\">Background image</label>\n        <input\n          id=\"image\"\n          type=\"file\"\n          accept=\".png, .jpg, .jpeg\"\n          onChange={e => {\n            const target = e.target as HTMLInputElement;\n            if (target.files != null && target.files.length > 0) {\n              const imageBlob = target.files[0];\n              const image = document.createElement(\"img\");\n              image.src = URL.createObjectURL(imageBlob);\n              props.addImage(image);\n            }\n          }}\n        />\n        {\" - \"}\n        <button\n          onClick={() => {\n            props.removeImage();\n          }}\n        >\n          Remove image\n        </button>\n        <br />\n        <label>\n          Feature title:\n          <input\n            type=\"text\"\n            value={props.feature}\n            onChange={e => {\n              const target = e.target as HTMLInputElement;\n              props.dispatch({ type: \"feature/set\", payload: target.value });\n            }}\n          />\n        </label>\n      </>\n    )}\n  </section>\n);\n\nexport default TileTools;\n","import React, { useRef, useReducer } from \"react\";\nimport immer from \"immer\";\nimport domtoimage from \"dom-to-image\";\nimport { saveAs } from \"file-saver\";\n\nimport { TrackType, StateType, ActionTypes } from \"types\";\nimport css from \"./Tile.module.css\";\nimport TileTools from \"components/Tile/TileTools\";\n\ntype TileType = {\n  data: TrackType[];\n  page: number;\n};\n\nconst handleNewLines = (string: String) => {\n  return string.split(\"<br>\").map((string, i, ogArr) => {\n    if (ogArr.length - 1 > i) {\n      return (\n        <span key={i}>\n          {string}\n          <br />\n        </span>\n      );\n    }\n    return string;\n  });\n};\n\nconst handleDroppedChars = (string: String) => {\n  return string\n    .toUpperCase()\n    .split(\"\")\n    .map((string, i) => {\n      if (/A|E/.test(string)) {\n        return (\n          <span key={i} className={css.drop}>\n            {string}\n          </span>\n        );\n      }\n      return string;\n    });\n};\n\nconst initialState = {\n  showImg: false,\n  isFeature: false,\n  feature: \"Enter feature...\"\n};\n\nconst reducer = (state: StateType, action: ActionTypes) => {\n  return immer(state, draftState => {\n    switch (action.type) {\n      case \"showImage/set\":\n        draftState.showImg = action.payload;\n        break;\n      case \"isFeature/set\":\n        draftState.isFeature = action.payload;\n        break;\n      case \"feature/set\":\n        draftState.feature = action.payload;\n    }\n  });\n};\n\nconst Tile = (props: TileType) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const tileRef = useRef<null | HTMLElement>(null);\n  const imgContainerRef = useRef<null | HTMLDivElement>(null);\n  const addImage = (imgEl: HTMLImageElement) => {\n    dispatch({ type: \"showImage/set\", payload: true });\n    if (imgContainerRef.current != null) {\n      imgContainerRef.current.innerHTML = \"\";\n      const overlayEl = document.createElement(\"div\");\n      overlayEl.classList.add(css.overlay);\n      imgContainerRef.current.appendChild(overlayEl);\n      imgContainerRef.current.appendChild(imgEl);\n    }\n  };\n  const removeImage = () => {\n    dispatch({ type: \"showImage/set\", payload: false });\n    if (imgContainerRef.current != null) {\n      imgContainerRef.current.innerHTML = \"\";\n    }\n  };\n  const renderImage = () => {\n    if (tileRef.current != null) {\n      domtoimage.toBlob(tileRef.current).then(function(blob: Blob) {\n        saveAs(blob, \"my-node.png\");\n      });\n    }\n  };\n  return (\n    <>\n      <h3 className={css.heading}>Tile {props.page}</h3>\n      <section\n        ref={tileRef}\n        className={`${css.container} ${state.showImg ? css.showImg : \"\"}`}\n      >\n        <div ref={imgContainerRef} className={css.image}></div>\n        {state.isFeature && (\n          <div className={css.featureTitle}>\n            - {handleDroppedChars(state.feature)}\n          </div>\n        )}\n        {props.data.map((track, i) => (\n          <div key={i} className={css.track}>\n            <div className={css.main}>\n              <span className={css.artist}>\n                {handleNewLines(track.Artist)} -\n              </span>{\" \"}\n              <span className={css.song}>{handleNewLines(track.Song)}</span>\n            </div>\n            <div className={css.label}>({track.Label})</div>\n          </div>\n        ))}\n      </section>\n      <TileTools\n        addImage={addImage}\n        removeImage={removeImage}\n        dispatch={dispatch}\n        isFeature={state.isFeature}\n        feature={state.feature}\n        renderImage={renderImage}\n      />\n    </>\n  );\n};\n\nexport default Tile;\n","import React, { useRef, useReducer } from \"react\";\nimport domtoimage from \"dom-to-image\";\nimport { saveAs } from \"file-saver\";\nimport immer from \"immer\";\n\nimport css from \"./FrontTile.module.css\";\n\ntype StateType = {\n  date: string;\n  features: string;\n};\n\ntype ActionType =\n  | { type: \"feature/set\"; payload: string }\n  | { type: \"date/set\"; payload: string };\n\nconst formatDate = (date: string) => {\n  const dateArr = date.split(\"-\").map(str => parseInt(str));\n  const dateObj = new Date(dateArr[0], --dateArr[1], dateArr[2]);\n  return new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"2-digit\",\n    month: \"2-digit\",\n    day: \"2-digit\"\n  })\n    .format(dateObj)\n    .replace(/\\//g, \"-\");\n};\n\nconst initDate = () => {\n  const date = new Date();\n  // https://gomakethings.com/setting-a-date-input-to-todays-date-with-vanilla-js/\n  return (\n    date.getFullYear().toString() +\n    \"-\" +\n    (date.getMonth() + 1).toString().padStart(2, \"0\") +\n    \"-\" +\n    date\n      .getDate()\n      .toString()\n      .padStart(2, \"0\")\n  );\n};\n\nconst reducer = (state: StateType, action: ActionType) => {\n  return immer(state, draft => {\n    switch (action.type) {\n      case \"feature/set\":\n        draft.features = action.payload;\n        break;\n      case \"date/set\":\n        draft.date = action.payload;\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nconst intialState = {\n  date: initDate(),\n  features: \"Here's a feature \\n another\"\n};\n\nconst TileFront = () => {\n  const [state, dispatch] = useReducer(reducer, intialState);\n  const imgContainerRef = useRef<null | HTMLDivElement>(null);\n  const tileRef = useRef<null | HTMLElement>(null);\n  const addImage = (imgEl: HTMLImageElement) => {\n    if (imgContainerRef.current != null) {\n      imgContainerRef.current.innerHTML = \"\";\n      const overlayEl = document.createElement(\"div\");\n      overlayEl.classList.add(css.overlay);\n      imgContainerRef.current.appendChild(overlayEl);\n      imgContainerRef.current.appendChild(imgEl);\n    }\n  };\n\n  return (\n    <>\n      <h3 className={css.heading}>Front tile</h3>\n      <section className={css.container} ref={tileRef}>\n        <div ref={imgContainerRef} className={css.image}></div>\n        <div className={css.main}>\n          <div className={css.date}>{formatDate(state.date)}</div>\n          <div className={css.title}>\n            <span>\n              B<span className={css.drop}>E</span>NJI B.\n            </span>\n            <span>\n              TR\n              <span className={css.drop}>A</span>CKLIST\n            </span>\n          </div>\n          <div className={css.features}>{state.features}</div>\n        </div>\n      </section>\n      <div className={css.tools}>\n        <button\n          onClick={() => {\n            if (tileRef.current != null) {\n              domtoimage.toBlob(tileRef.current).then(function(blob: Blob) {\n                saveAs(blob, \"my-node.png\");\n              });\n            }\n          }}\n        >\n          Convert to .png\n        </button>\n        <br />\n        <label htmlFor=\"image\">Background image: </label>\n        <input\n          id=\"image\"\n          type=\"file\"\n          accept=\".png, .jpg, .jpeg\"\n          onChange={e => {\n            const target = e.target as HTMLInputElement;\n            if (target.files != null && target.files.length > 0) {\n              const imageBlob = target.files[0];\n              const image = document.createElement(\"img\");\n              image.src = URL.createObjectURL(imageBlob);\n              addImage(image);\n            }\n          }}\n        />\n        <br />\n        <label>\n          Features:{\" \"}\n          <textarea\n            rows={3}\n            value={state.features}\n            onChange={e => {\n              const target = e.target as HTMLTextAreaElement;\n              dispatch({ type: \"feature/set\", payload: target.value });\n            }}\n          />\n        </label>\n        <br />\n        <label>\n          Date:{\" \"}\n          <input\n            type=\"date\"\n            value={state.date}\n            onChange={e => {\n              const target = e.target as HTMLInputElement;\n              if (target.value !== \"\") {\n                dispatch({ type: \"date/set\", payload: target.value });\n              } else {\n                dispatch({ type: \"date/set\", payload: initDate() });\n              }\n            }}\n          />\n        </label>\n      </div>\n    </>\n  );\n};\n\nexport default TileFront;\n","import React from \"react\";\n\nimport Tile from \"components/Tile/Tile\";\nimport TileFront from \"components/FrontTile/FrontTile\";\nimport { TrackType } from \"types\";\nimport css from \"./Tiles.module.css\";\n\ntype TilesType = {\n  data: TrackType[];\n};\n\nconst Tiles = (props: TilesType) => (\n  <section className={css.container}>\n    <TileFront />\n    {props.data\n      .reduce((acc: number[], item) => {\n        if (!acc.includes(item.Page)) {\n          return [...acc, item.Page];\n        }\n        return acc;\n      }, [])\n      .map((page: number, i) => (\n        <Tile\n          key={i}\n          page={page}\n          data={props.data.filter(tile => tile.Page === page)}\n        />\n      ))}\n  </section>\n);\n\nexport default Tiles;\n","import React, { useState } from \"react\";\nimport csvtojson from \"csvtojson\";\n\nimport Tiles from \"components/Tiles/Tiles\";\nimport { TrackType } from \"types\";\nimport css from \"./App.module.css\";\n\nfunction App() {\n  const [data, setData] = useState<TrackType[]>([]);\n  return (\n    <div className=\"App\">\n      <div className={css.heading}>\n        <h1 className={css.title}>Amy's App</h1>\n        <fieldset className={css.upload}>\n          <legend>Upload a CSV file</legend>\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={e => {\n              const target = e.target as HTMLInputElement;\n              if (target.files != null && target.files.length > 0) {\n                const fileBlob = target.files[0];\n                const reader = new FileReader();\n                reader.onload = () => {\n                  if (typeof reader.result === \"string\") {\n                    csvtojson()\n                      .fromString(reader.result)\n                      .then(function(result) {\n                        try {\n                          setData(\n                            result.map(item => ({\n                              ...item,\n                              Page: parseInt(item.Page)\n                            }))\n                          );\n                        } catch (error) {\n                          console.error(\"invalid data\");\n                        }\n                      });\n                  }\n                };\n                reader.readAsText(fileBlob);\n              }\n            }}\n          />\n          {data.length > 0 && (\n            <button\n              onClick={() => {\n                setData([]);\n              }}\n            >\n              Clear tiles\n            </button>\n          )}\n          <br />\n          Headers must be <code>Song,Artist,Label,Page</code>\n        </fieldset>\n      </div>\n      <Tiles data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}